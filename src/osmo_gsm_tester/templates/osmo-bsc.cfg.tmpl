! Configuration rendered by osmo-gsm-tester
log stderr
 logging filter all 1
 logging color 1
 logging print category 1
 logging print category-hex 0
 logging print level 1
 logging print file basename last
 logging print extended-timestamp 1
 logging level set-all debug
line vty
 no login
 bind ${bsc.ip_address.addr}
ctrl
 bind ${bsc.ip_address.addr}
e1_input
 e1_line 0 driver ipa
 ipa bind ${bsc.ip_address.addr}
cs7 instance 0
 point-code 0.0.2
 asp asp0 2905 0 m3ua
  local-ip ${bsc.ip_address.addr}
  remote-ip ${stp.ip_address.addr}
  role asp
  sctp-role client
 as as0 m3ua
  asp asp0
  routing-key 2 0.0.2
 sccp-address bsc_local
  point-code 0.0.2
  routing-indicator PC
 sccp-address msc_remote
  point-code 0.0.1
  routing-indicator PC
network
 network country code ${bsc.net.mcc}
 mobile network code ${bsc.net.mnc}
 encryption ${bsc.net.encryption}
 neci 1
 handover 0
 handover window rxlev averaging 10
 handover window rxqual averaging 1
 handover window rxlev neighbor averaging 10
 handover power budget interval 6
 handover power budget hysteresis 3
 handover maximum distance 9999
%for bts in bsc.net.bts_list:
 bts ${loop.index}
  type ${bts.osmobsc_bts_type}
  band ${bts.band}
  cell_identity ${bts.cell_identity}
  location_area_code ${bts.location_area_code}
  training_sequence_code 7
  base_station_id_code ${bts.base_station_id_code}
  ms max power 33
  cell reselection hysteresis 4
  rxlev access min 0
  channel allocator ${bts.channel_allocator}
  rach tx integer 9
  rach max transmission 7
% if bsc.net.get('rsl_ip', False):
  ip.access rsl-ip ${bsc.net.rsl_ip}
% endif
  ip.access unit_id ${bts.ipa_unit_id} 0
  oml ip.access stream_id ${bts.stream_id} line 0
% if bts.get('emergency_calls_allowed', False):
  rach emergency call allowed 1
% else:
  rach emergency call allowed 0
%endif
% if bts.get('sgsn', False) and bts['gprs_mode'] != 'none':
  gprs mode ${bts.gprs_mode}
  gprs routing area ${bts.routing_area_code}
  gprs network-control-order nc1
  gprs cell bvci ${bts.bvci}
  gprs cell timer blocking-timer 3
  gprs cell timer blocking-retries 3
  gprs cell timer unblocking-retries 3
  gprs cell timer reset-timer 3
  gprs cell timer reset-retries 3
  gprs cell timer suspend-timer 10
  gprs cell timer suspend-retries 3
  gprs cell timer resume-timer 10
  gprs cell timer resume-retries 3
  gprs cell timer capability-update-timer 10
  gprs cell timer capability-update-retries 3
  gprs nsei ${bts.bvci}
  gprs ns timer tns-block 3
  gprs ns timer tns-block-retries 3
  gprs ns timer tns-reset 3
  gprs ns timer tns-reset-retries 3
  gprs ns timer tns-test 30
  gprs ns timer tns-alive 3
  gprs ns timer tns-alive-retries 10
  gprs nsvc 0 nsvci ${bts.bvci}
  gprs nsvc 0 local udp port 23020
  gprs nsvc 0 remote udp port 23000
  gprs nsvc 0 remote ip ${bts.sgsn.ip_address.addr}
% else:
  gprs mode none
% endif
% for trx in bts.trx_list:
  trx ${loop.index}
   rf_locked 0
   arfcn ${trx.arfcn}
   nominal power ${trx.nominal_power}
   max_power_red ${trx.max_power_red}
   rsl e1 tei 0
%  for ts in trx.timeslot_list:
   timeslot ${loop.index}
    phys_chan_config ${ts.phys_chan_config}
%  endfor
% endfor
%endfor
msc
 core-mobile-country-code ${bsc.net.mcc}
 core-mobile-network-code ${bsc.net.mnc}
 allow-emergency allow
 mgw remote-ip ${mgw.ip_address.addr}
 mgw remote-port 2427
 mgw local-ip ${bsc.ip_address.addr}
 codec-list ${' '.join(bsc.net.codec_list)}
 amr-config 12_2k forbidden
 amr-config 10_2k forbidden
 amr-config 7_95k forbidden
 amr-config 7_40k forbidden
 amr-config 6_70k forbidden
 amr-config 5_90k allowed
 amr-config 5_15k forbidden
 amr-config 4_75k forbidden
 osmux ${bsc.use_osmux}
 msc-addr msc_remote
 bsc-addr bsc_local
